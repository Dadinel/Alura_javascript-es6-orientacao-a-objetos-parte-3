{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","targer","error","erro","name","connection_","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAS,OAAU;AACxC,QAAMC,SAAU,CAAC,aAAD,CAAhB;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAU,YAAhB;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAa,IAAjB;;AAEA;AACI,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;AAHL;AAAA;AAAA,4CAK2B;AACnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;AAC/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAFD;;AAIAR,gCAAYS,SAAZ,GAAwB,aAAK;AACzB,4BAAG,CAACf,UAAJ,EAAgB;AACZA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAW;AAC1B,sCAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH,6BAFD;AAGH;;AAEDE,gCAAQJ,UAAR;AACH,qBAVD;;AAYAM,gCAAYW,OAAZ,GAAsB,aAAK;AACvBC,gCAAQC,GAAR,CAAYP,EAAEQ,MAAF,CAASC,KAArB;AACAhB,+BAAOO,EAAEC,MAAF,CAASS,IAAT,CAAcC,IAArB;AACH,qBAHD;AAIH,iBAvBM,CAAP;AAwBH;AA9BL;AAAA;AAAA,0CAgCyBC,WAhCzB,EAgCsC;AAC9B3B,uBAAO4B,OAAP,CAAe,iBAAS;AACpB,wBAAGD,YAAYE,gBAAZ,CAA6BC,QAA7B,CAAsCC,KAAtC,CAAH,EAAiD;AAC7CJ,oCAAYK,iBAAZ,CAA8BD,KAA9B;AACH;;AAEDJ,gCAAYM,iBAAZ,CAA8BF,KAA9B,EAAqC,EAAEG,eAAe,IAAjB,EAArC;AACH,iBAND;AAOH;AAxCL;AAAA;AAAA,8CA0C6B;AACrB,oBAAG/B,UAAH,EAAe;AACXC;AACA;AACAD,iCAAa,IAAb;AACAC,4BAAQ,IAAR;AACH;AACJ;AAjDL;;AAAA;AAAA;AAmDH,CA3DuB,EAAxB,C,CA2DM;;AAEN","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function /*tmp*/() {\r\n    const stores  = ['negociacoes'];\r\n    const version = 5;\r\n    const dbName  = 'aluraframe'\r\n\r\n    var connection = null;\r\n    var close      = null;\r\n\r\n    return class ConnectionFactory {\r\n        constructor() {\r\n            throw new Error('Não é possível criar instâncias de ConnectionFactory');\r\n        }\r\n\r\n        static getConnection() {\r\n            return new Promise((resolve, reject) => {\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n                    ConnectionFactory._createStores(e.target.result);\r\n                };\r\n\r\n                openRequest.onsuccess = e => {\r\n                    if(!connection) {\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function() {\r\n                            throw new Error('Você não pode fechar diretamente a conexão.');\r\n                        }\r\n                    }\r\n\r\n                    resolve(connection);\r\n                };\r\n\r\n                openRequest.onerror = e => {\r\n                    console.log(e.targer.error);\r\n                    reject(e.target.erro.name);\r\n                };\r\n            });\r\n        }\r\n\r\n        static _createStores(connection_) {\r\n            stores.forEach(store => {\r\n                if(connection_.objectStoreNames.contains(store)) {\r\n                    connection_.deleteObjectStore(store);\r\n                }\r\n\r\n                connection_.createObjectStore(store, { autoIncrement: true } );\r\n            });\r\n        }\r\n\r\n        static closeConnection() {\r\n            if(connection) {\r\n                close();\r\n                //Reflect.apply(close, connection, []); //Necessário sem o bind...\r\n                connection = null;\r\n                close = null;\r\n            }\r\n        }\r\n    }\r\n})(); //Função anônima com auto-invocação\r\n\r\n//var ConnectionFactory = tmp();"]}