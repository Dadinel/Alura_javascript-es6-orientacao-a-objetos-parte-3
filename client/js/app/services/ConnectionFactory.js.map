{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","targer","error","erro","name","connection_","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACUA,kB,GAAU,CAAC,aAAD,C;AACVC,mB,GAAU,C;AACVC,kB,GAAU,Y;AAEZC,sB,GAAa,I;AACbC,iB,GAAa,I;;yCAEOC,iB;AACpB,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAEsB;AACnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,aAAK;AACzB,oCAAG,CAAChB,UAAJ,EAAgB;AACZA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAW;AAC1B,8CAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACH,qCAFD;AAGH;;AAEDE,wCAAQL,UAAR;AACH,6BAVD;;AAYAO,wCAAYW,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,GAAR,CAAYP,EAAEQ,MAAF,CAASC,KAArB;AACAhB,uCAAOO,EAAEC,MAAF,CAASS,IAAT,CAAcC,IAArB;AACH,6BAHD;AAIH,yBAvBM,CAAP;AAwBH;;;kDAEoBC,W,EAAa;AAC9B5B,+BAAO6B,OAAP,CAAe,iBAAS;AACpB,gCAAGD,YAAYE,gBAAZ,CAA6BC,QAA7B,CAAsCC,KAAtC,CAAH,EAAiD;AAC7CJ,4CAAYK,iBAAZ,CAA8BD,KAA9B;AACH;;AAEDJ,wCAAYM,iBAAZ,CAA8BF,KAA9B,EAAqC,EAAEG,eAAe,IAAjB,EAArC;AACH,yBAND;AAOH;;;sDAEwB;AACrB,4BAAGhC,UAAH,EAAe;AACXC;AACA;AACAD,yCAAa,IAAb;AACAC,oCAAQ,IAAR;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["//var ConnectionFactory = (function /*tmp*/() {\r\n    const stores  = ['negociacoes'];\r\n    const version = 5;\r\n    const dbName  = 'aluraframe'\r\n\r\n    let connection = null;\r\n    let close      = null;\r\n\r\n    export /*return*/ class ConnectionFactory {\r\n        constructor() {\r\n            throw new Error('Não é possível criar instâncias de ConnectionFactory');\r\n        }\r\n\r\n        static getConnection() {\r\n            return new Promise((resolve, reject) => {\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n                    ConnectionFactory._createStores(e.target.result);\r\n                };\r\n\r\n                openRequest.onsuccess = e => {\r\n                    if(!connection) {\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function() {\r\n                            throw new Error('Você não pode fechar diretamente a conexão.');\r\n                        }\r\n                    }\r\n\r\n                    resolve(connection);\r\n                };\r\n\r\n                openRequest.onerror = e => {\r\n                    console.log(e.targer.error);\r\n                    reject(e.target.erro.name);\r\n                };\r\n            });\r\n        }\r\n\r\n        static _createStores(connection_) {\r\n            stores.forEach(store => {\r\n                if(connection_.objectStoreNames.contains(store)) {\r\n                    connection_.deleteObjectStore(store);\r\n                }\r\n\r\n                connection_.createObjectStore(store, { autoIncrement: true } );\r\n            });\r\n        }\r\n\r\n        static closeConnection() {\r\n            if(connection) {\r\n                close();\r\n                //Reflect.apply(close, connection, []); //Necessário sem o bind...\r\n                connection = null;\r\n                close = null;\r\n            }\r\n        }\r\n    }\r\n//})(); //Função anônima com auto-invocação\r\n\r\n//var ConnectionFactory = tmp();"]}