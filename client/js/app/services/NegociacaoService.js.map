{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","Promise","resolve","reject","get","then","negociacoes","map","Date","objeto","data","quantidade","valor","catch","console","log","erro","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","listaAtual","obterNegociacoes","filter","some","negociacao","isEquals","negociacaoExistente","Error","getConnection","connection","dao","adiciona","listaTodos","apagaTodos"],"mappings":";;;;;;;;;;;;;;;AAAQA,uB,gBAAAA,W;;AACAC,6B,sBAAAA,iB;;AACAC,yB,qBAAAA,a;;AACAC,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;yCAEKC,iB;AAET,6CAAc;AAAA;;AAEV,yBAAKC,KAAL,GAAa,IAAIL,WAAJ,EAAb;AACH;;;;+DAE0B;AAAA;;AAExB,+BAAO,IAAIM,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEnC,kCAAKH,KAAL,CACKI,GADL,CACS,oBADT,EAEKC,IAFL,CAEU,uBAAe;AACjB;AACAH,wCAAQI,YAAYC,GAAZ,CAAgB;AAAA,2CAAU,IAAIT,UAAJ,CAAe,IAAIU,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,iCAAhB,CAAR;AACH,6BALL,EAMKC,KANL,CAMW,gBAAQ;AACXC,wCAAQC,GAAR,CAAYC,IAAZ;AACAb,uCAAO,iDAAP;AACH,6BATL;AAUJ,yBAZM,CAAP;AAaF;;;uEAEkC;AAAA;;AAEhC,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEnC,mCAAKH,KAAL,CACKI,GADL,CACS,sBADT,EAEKC,IAFL,CAEU,uBAAe;AACjB;AACAH,wCAAQI,YAAYC,GAAZ,CAAgB;AAAA,2CAAU,IAAIT,UAAJ,CAAe,IAAIU,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,iCAAhB,CAAR;AACH,6BALL,EAMKC,KANL,CAMW,gBAAQ;AACXC,wCAAQC,GAAR,CAAYC,IAAZ;AACAb,uCAAO,0DAAP;AACH,6BATL;AAUJ,yBAZM,CAAP;AAeF;;;wEAEmC;AAAA;;AAEjC,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEnC,mCAAKH,KAAL,CACKI,GADL,CACS,uBADT,EAEKC,IAFL,CAEU,uBAAe;AACjB;AACAH,wCAAQI,YAAYC,GAAZ,CAAgB;AAAA,2CAAU,IAAIT,UAAJ,CAAe,IAAIU,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,iCAAhB,CAAR;AACH,6BALL,EAMKC,KANL,CAMW,gBAAQ;AACXC,wCAAQC,GAAR,CAAYC,IAAZ;AACAb,uCAAO,2DAAP;AACH,6BATL;AAUJ,yBAZM,CAAP;AAaF;;;uDAGkB;AAAA;;AAEf,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpCF,oCAAQgB,GAAR,CAAY,CACR,OAAKC,wBAAL,EADQ,EAER,OAAKC,gCAAL,EAFQ,EAGR,OAAKC,iCAAL,EAHQ,CAAZ,EAIGf,IAJH,CAIQ,oBAAY;;AAEhB,oCAAIC,cAAce,SACbC,MADa,CACN,UAACC,KAAD,EAAQC,OAAR;AAAA,2CAAoBD,MAAME,MAAN,CAAaD,OAAb,CAApB;AAAA,iCADM,EACqC,EADrC,EAEbjB,GAFa,CAET;AAAA,2CAAQ,IAAIT,UAAJ,CAAe,IAAIU,IAAJ,CAASkB,KAAKhB,IAAd,CAAf,EAAoCgB,KAAKf,UAAzC,EAAqDe,KAAKd,KAA1D,CAAR;AAAA,iCAFS,CAAlB;;AAIAV,wCAAQI,WAAR;AAEH,6BAZD,EAYGO,KAZH,CAYS;AAAA,uCAAQV,OAAOa,IAAP,CAAR;AAAA,6BAZT;AAaH,yBAfM,CAAP;AAgBH;;;4CAEOW,U,EAAY;AAChB,+BAAO,KAAKC,gBAAL,GACFvB,IADE,CACG;AAAA,mCAAeC,YAAYuB,MAAZ,CACb;AAAA,uCAAc,CAACF,WAAWG,IAAX,CACX;AAAA,2CAAuBC,WAAWC,QAAX,CAAoBC,mBAApB,CAAvB;AAAA,iCADW,CACqD;AADrD,iCAAf;AAAA,6BADa,CAAf;AAAA,yBADH,EAOFpB,KAPE,CAOI,gBAAQ;AACXC,oCAAQC,GAAR,CAAYC,IAAZ;AACA,kCAAM,IAAIkB,KAAJ,CAAU,uDAAV,CAAN;AACH,yBAVE,CAAP;AAWH;;;6CAEQH,U,EAAY;AACjB,+BAAOnC,kBAAkBuC,aAAlB,GACF9B,IADE,CACI;AAAA,mCAAc,IAAIR,aAAJ,CAAkBuC,UAAlB,CAAd;AAAA,yBADJ,EAEF/B,IAFE,CAEI;AAAA,mCAAOgC,IAAIC,QAAJ,CAAaP,UAAb,CAAP;AAAA,yBAFJ,EAGF1B,IAHE,CAGG;AAAA,mCAAM,oCAAN;AAAA,yBAHH,EAIFQ,KAJE,CAII,gBAAQ;AACXC,oCAAQC,GAAR,CAAYC,IAAZ;AACA,kCAAM,IAAIkB,KAAJ,CAAU,0CAAV,CAAN;AACH,yBAPE,CAAP;AAQH;;;4CAEO;AACJ,+BAAOtC,kBAAkBuC,aAAlB,GACF9B,IADE,CACG;AAAA,mCAAc,IAAIR,aAAJ,CAAkBuC,UAAlB,CAAd;AAAA,yBADH,EAEF/B,IAFE,CAEG;AAAA,mCAAOgC,IAAIE,UAAJ,EAAP;AAAA,yBAFH,EAGF1B,KAHE,CAGI,gBAAQ;AACXC,oCAAQC,GAAR,CAAYC,IAAZ;AACA,kCAAM,IAAIkB,KAAJ,CAAU,wCAAV,CAAN;AACH,yBANE,CAAP;AAOH;;;4CAEO;AACJ,+BAAOtC,kBAAkBuC,aAAlB,GACF9B,IADE,CACG;AAAA,mCAAc,IAAIR,aAAJ,CAAkBuC,UAAlB,CAAd;AAAA,yBADH,EAEF/B,IAFE,CAEG;AAAA,mCAAOgC,IAAIG,UAAJ,EAAP;AAAA,yBAFH,EAGFnC,IAHE,CAGG;AAAA,mCAAM,mCAAN;AAAA,yBAHH,EAIFQ,KAJE,CAII,gBAAQ;AACXC,oCAAQC,GAAR,CAAYC,IAAZ;AACA,kCAAM,IAAIkB,KAAJ,CAAU,yCAAV,CAAN;AACH,yBAPE,CAAP;AAQH","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\nimport {ConnectionFactory} from './ConnectionFactory';\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\nimport {Negociacao} from '../models/Negociacao';\n\nexport class NegociacaoService {\n    \n    constructor() {\n        \n        this._http = new HttpService();\n    }\n    \n    obterNegociacoesDaSemana() {\n       \n       return new Promise((resolve, reject) => {\n        \n            this._http\n                .get('negociacoes/semana')\n                .then(negociacoes => {\n                    //console.log(negociacoes);\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana');\n                });  \n       });        \n    }\n    \n    obterNegociacoesDaSemanaAnterior() {\n       \n       return new Promise((resolve, reject) => {\n        \n            this._http\n                .get('negociacoes/anterior')\n                .then(negociacoes => {\n                    //console.log(negociacoes);\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana anterior');\n                });  \n       }); \n       \n        \n    }\n    \n    obterNegociacoesDaSemanaRetrasada() {\n       \n       return new Promise((resolve, reject) => {\n        \n            this._http\n                .get('negociacoes/retrasada')\n                .then(negociacoes => {\n                    //console.log(negociacoes);\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana retrasada');\n                });  \n       }); \n    }    \n    \n    \n    obterNegociacoes() {\n\n        return new Promise((resolve, reject) => {\n\n            Promise.all([\n                this.obterNegociacoesDaSemana(),\n                this.obterNegociacoesDaSemanaAnterior(),\n                this.obterNegociacoesDaSemanaRetrasada()\n            ]).then(periodos => {\n\n                let negociacoes = periodos\n                    .reduce((dados, periodo) => dados.concat(periodo), [])\n                    .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor ));\n\n                resolve(negociacoes);\n\n            }).catch(erro => reject(erro));\n        });\n    }\n\n    importa(listaAtual) {\n        return this.obterNegociacoes()\n            .then(negociacoes => negociacoes.filter( \n                    negociacao => !listaAtual.some(\n                        negociacaoExistente => negociacao.isEquals(negociacaoExistente) //JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)\n                    )\n                )\n            )\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível buscar as negociações para importar.');\n            });\n    }\n\n    cadastra(negociacao) {\n        return ConnectionFactory.getConnection()\n            .then( connection => new NegociacaoDao(connection))\n            .then( dao => dao.adiciona(negociacao))\n            .then(() => 'Negociação adicionada com sucesso.' )\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível adicionar a negociação.');\n            });\n    }\n\n    lista() {\n        return ConnectionFactory.getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.listaTodos())\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações.');\n            });\n    }\n\n    apaga() {\n        return ConnectionFactory.getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.apagaTodos())\n            .then(() => 'Negociações apagadas com sucesso.')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível apagar as negociações.');\n            });\n    }\n}"]}